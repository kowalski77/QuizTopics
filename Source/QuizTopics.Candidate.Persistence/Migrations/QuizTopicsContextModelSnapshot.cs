// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizTopics.Candidate.Persistence;

namespace QuizTopics.Candidate.Persistence.Migrations
{
    [DbContext(typeof(QuizTopicsContext))]
    partial class QuizTopicsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Exams.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Candidate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Exams.ExamAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExamQuestionId");

                    b.ToTable("ExamAnswer");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Exams.ExamQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Answered")
                        .HasColumnType("bit");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamQuestion");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Quizzes.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Quizzes.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Quizzes.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Exams.ExamAnswer", b =>
                {
                    b.HasOne("QuizTopics.Candidate.Domain.Exams.ExamQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("ExamQuestionId");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Exams.ExamQuestion", b =>
                {
                    b.HasOne("QuizTopics.Candidate.Domain.Exams.Exam", null)
                        .WithMany("QuestionsCollection")
                        .HasForeignKey("ExamId");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Quizzes.Answer", b =>
                {
                    b.HasOne("QuizTopics.Candidate.Domain.Quizzes.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Quizzes.Question", b =>
                {
                    b.HasOne("QuizTopics.Candidate.Domain.Quizzes.Quiz", null)
                        .WithMany("QuestionCollection")
                        .HasForeignKey("QuizId");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Exams.Exam", b =>
                {
                    b.Navigation("QuestionsCollection");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Exams.ExamQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Quizzes.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuizTopics.Candidate.Domain.Quizzes.Quiz", b =>
                {
                    b.Navigation("QuestionCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
